// =============================
// AI HQD ‚Äî script.js (v4 Fixed)
// =============================

// L·∫•y c√°c ph·∫ßn t·ª≠ trong DOM
const inputExpr = document.getElementById("expr-input");
const btnCalc = document.getElementById("calc-btn");
const btnSGK = document.getElementById("sgk-btn");
const btnPlot = document.getElementById("plot-btn");
const latexResult = document.getElementById("latex-result");
const stepsContainer = document.getElementById("steps-container");
const tableContainer = document.getElementById("table-container");

// H√†m hi·ªÉn th·ªã k·∫øt qu·∫£ b·∫±ng MathJax
function renderMath(latex, container) {
  container.innerHTML = `\\(${latex}\\)`;
  if (window.MathJax) MathJax.typesetPromise([container]);
}

// H√†m t√≠nh ƒë·∫°o h√†m SGK
btnCalc.addEventListener("click", () => {
  const expr = inputExpr.value.trim();
  if (!expr) {
    alert("‚ö†Ô∏è H√£y nh·∫≠p bi·ªÉu th·ª©c f(x)!");
    return;
  }

  try {
    const scope = { x: 1 };
    const derivative = math.derivative(expr, "x").toString();
    const simplified = math.simplify(derivative).toString();

    latexResult.innerHTML = `<b>K·∫øt qu·∫£:</b> ƒê·∫°o h√†m c·ªßa f(x) l√†:`;
    renderMath(`f'(x) = ${math.parse(simplified).toTex()}`, latexResult);

    stepsContainer.innerHTML = `
      <h4>üßÆ L·ªùi gi·∫£i t·ª´ng b∆∞·ªõc (Chu·∫©n SGK)</h4>
      <p><b>B∆∞·ªõc 1:</b> Bi·ªÉu th·ª©c ban ƒë·∫ßu: \\( f(x) = ${math.parse(expr).toTex()} \\)</p>
      <p><b>B∆∞·ªõc 2:</b> √Åp d·ª•ng c√°c quy t·∫Øc ƒë·∫°o h√†m c∆° b·∫£n (t·ªïng, hi·ªáu, t√≠ch, th∆∞∆°ng, h√†m h·ª£p...)</p>
      <p><b>B∆∞·ªõc 3:</b> ƒê·∫°o h√†m: \\( f'(x) = ${math.parse(derivative).toTex()} \\)</p>
      <p><b>B∆∞·ªõc 4:</b> R√∫t g·ªçn k·∫øt qu·∫£: \\( f'(x) = ${math.parse(simplified).toTex()} \\)</p>
    `;
    MathJax.typesetPromise([stepsContainer]);

    // Reset b·∫£ng & ƒë·ªì th·ªã
    tableContainer.innerHTML = "";
    document.getElementById("plot").innerHTML = "";
  } catch (err) {
    alert("‚ùå L·ªói c√∫ ph√°p trong bi·ªÉu th·ª©c. Vui l√≤ng ki·ªÉm tra l·∫°i!");
    console.error(err);
  }
});

// H√†m kh·∫£o s√°t SGK (b·∫£ng d·∫•u + ƒë·ªì th·ªã)
btnSGK.addEventListener("click", () => {
  const expr = inputExpr.value.trim();
  if (!expr) return alert("‚ö†Ô∏è H√£y nh·∫≠p h√†m s·ªë tr∆∞·ªõc!");

  try {
    const f = math.parse(expr).compile();
    const f1 = math.derivative(expr, "x").compile();

    // T√≠nh gi√° tr·ªã t·∫°i c√°c ƒëi·ªÉm
    const xValues = math.range(-5, 5, 0.5).toArray();
    const yValues = xValues.map((x) => f.evaluate({ x }));
    const yPrime = xValues.map((x) => f1.evaluate({ x }));

    // Hi·ªÉn th·ªã nh·∫≠n x√©t SGK
    stepsContainer.innerHTML = `
      <h4>üìò Kh·∫£o s√°t h√†m s·ªë (Chu·∫©n SGK)</h4>
      <p>Ta c√≥ ƒë·∫°o h√†m: \\( f'(x) = ${math.parse(
        math.derivative(expr, "x").toString()
      ).toTex()} \\)</p>
      <p>X√©t d·∫•u c·ªßa \\( f'(x) \\): N·∫øu d∆∞∆°ng ‚Üí h√†m ƒë·ªìng bi·∫øn, √¢m ‚Üí ngh·ªãch bi·∫øn.</p>
    `;
    MathJax.typesetPromise([stepsContainer]);

    // T·∫°o b·∫£ng d·∫•u ƒë∆°n gi·∫£n
    let htmlTable = `
      <table border="1" style="margin:auto; border-collapse:collapse;">
        <tr><th>x</th><th>f'(x)</th><th>f(x)</th></tr>`;
    for (let i = 0; i < xValues.length; i += 4) {
      htmlTable += `<tr>
        <td>${xValues[i].toFixed(1)}</td>
        <td>${yPrime[i].toFixed(2)}</td>
        <td>${yValues[i].toFixed(2)}</td>
      </tr>`;
    }
    htmlTable += `</table>`;
    tableContainer.innerHTML = `<h4>B·∫£ng x√©t d·∫•u / Bi·∫øn thi√™n</h4>${htmlTable}`;

    // V·∫Ω ƒë·ªì th·ªã b·∫±ng Plotly
    Plotly.newPlot("plot", [
      { x: xValues, y: yValues, type: "scatter", name: "f(x)", line: { color: "blue" } },
      { x: xValues, y: yPrime, type: "scatter", name: "f'(x)", line: { color: "red", dash: "dot" } },
    ], {
      title: "ƒê·ªì th·ªã h√†m s·ªë v√† ƒë·∫°o h√†m",
      paper_bgcolor: "#fff",
      plot_bgcolor: "#fff",
      xaxis: { title: "x" },
      yaxis: { title: "y" }
    });
  } catch (err) {
    alert("‚ùå L·ªói khi kh·∫£o s√°t ho·∫∑c v·∫Ω ƒë·ªì th·ªã!");
    console.error(err);
  }
});

// N√∫t v·∫Ω ƒë·ªì th·ªã ri√™ng
btnPlot.addEventListener("click", () => {
  const expr = inputExpr.value.trim();
  if (!expr) return alert("‚ö†Ô∏è H√£y nh·∫≠p h√†m s·ªë!");

  try {
    const f = math.parse(expr).compile();
    const xValues = math.range(-10, 10, 0.1).toArray();
    const yValues = xValues.map((x) => f.evaluate({ x }));

    Plotly.newPlot("plot", [
      { x: xValues, y: yValues, type: "scatter", name: "f(x)", line: { color: "blue" } }
    ], {
      title: "ƒê·ªì th·ªã h√†m s·ªë",
      xaxis: { title: "x" },
      yaxis: { title: "y" },
      paper_bgcolor: "#fff",
      plot_bgcolor: "#fff"
    });
  } catch (err) {
    alert("‚ùå L·ªói khi v·∫Ω ƒë·ªì th·ªã!");
    console.error(err);
  }
});
