// ===============================
// SCRIPT.JS - Phi√™n b·∫£n SGK chu·∫©n
// ===============================

// H√†m chuy·ªÉn chu·ªói sang d·∫°ng LaTeX (ƒë·ªÉ hi·ªÉn th·ªã c√¥ng th·ª©c ƒë·∫πp)
function toTexFromString(expr){
  try {
    return math.parse(expr).toTex({parenthesis: 'auto'});
  } catch {
    return expr;
  }
}

// H√†m sinh l·ªùi gi·∫£i theo phong c√°ch SGK
function explainDerivativeSGK(expr, variable) {
  const steps = [];
  let derivative = '';
  let simplified = '';

  steps.push({
    title: "B∆∞·ªõc 1",
    content: `X√©t h√†m s·ªë \\( y = ${toTexFromString(expr)} \\).<br>
    Ta c·∫ßn t√≠nh ƒë·∫°o h√†m c·ªßa \\( y \\) theo \\( ${variable} \\).`
  });

  try {
    derivative = math.derivative(expr, variable).toString();
    simplified = math.simplify(derivative).toString();
  } catch (e) {
    steps.push({
      title: "L·ªói",
      content: "Kh√¥ng th·ªÉ t√≠nh ƒë·∫°o h√†m. H√£y ki·ªÉm tra l·∫°i bi·ªÉu th·ª©c nh·∫≠p v√†o."
    });
    return steps;
  }

  steps.push({
    title: "B∆∞·ªõc 2",
    content: `√Åp d·ª•ng c√°c quy t·∫Øc ƒë·∫°o h√†m c∆° b·∫£n:<br>
    - ƒê·∫°o h√†m c·ªßa t·ªïng b·∫±ng t·ªïng c√°c ƒë·∫°o h√†m.<br>
    - ƒê·∫°o h√†m c·ªßa t√≠ch v√† th∆∞∆°ng theo c√°c c√¥ng th·ª©c quen thu·ªôc.<br>
    - N·∫øu l√† h√†m h·ª£p, ta d√πng quy t·∫Øc chu·ªói.`
  });

  steps.push({
    title: "B∆∞·ªõc 3",
    content: `Th·ª±c hi·ªán ph√©p ƒë·∫°o h√†m t·ª´ng ph·∫ßn:<br>
    \\[
    y' = ${toTexFromString(derivative)}
    \\]`
  });

  if (derivative !== simplified) {
    steps.push({
      title: "B∆∞·ªõc 4",
      content: `R√∫t g·ªçn bi·ªÉu th·ª©c v·ª´a thu ƒë∆∞·ª£c:<br>
      \\[
      y' = ${toTexFromString(simplified)}
      \\]`
    });
  }

  steps.push({
    title: "K·∫øt lu·∫≠n",
    content: `V·∫≠y ƒë·∫°o h√†m c·ªßa \\( y = ${toTexFromString(expr)} \\) l√†:<br>
    \\[
    y' = ${toTexFromString(simplified || derivative)}
    \\]
    <br>‚úÖ <b>ƒê√°p s·ªë:</b> \\( y' = ${toTexFromString(simplified || derivative)} \\)`
  });

  return steps;
}

// Sinh c√°c b∆∞·ªõc
function generateSteps(expr, variable){
  try {
    return explainDerivativeSGK(expr, variable);
  } catch(e) {
    console.error("Error generating SGK steps:", e);
    return [{title: "L·ªói", content: "Kh√¥ng th·ªÉ sinh l·ªùi gi·∫£i chi ti·∫øt cho bi·ªÉu th·ª©c n√†y."}];
  }
}

// Hi·ªÉn th·ªã l·ªùi gi·∫£i tr√™n giao di·ªán
function showStepsOnUI(steps){
  const container = document.getElementById('stepsContainer');
  container.innerHTML = '<h3>üìò L·ªùi gi·∫£i chi ti·∫øt (Chu·∫©n SGK)</h3>';
  steps.forEach(s => {
    const div = document.createElement('div');
    div.className = 'step';
    div.innerHTML = `<p><b>${s.title}:</b> ${s.content}</p>`;
    container.appendChild(div);
  });

  if (window.MathJax) MathJax.typeset(); // L√†m c√¥ng th·ª©c hi·ªÉn th·ªã ƒë·∫πp
}

// X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠p v√† b·∫•m n√∫t "Gi·∫£i"
function solveDerivative(){
  const expr = document.getElementById('exprInput').value.trim();
  const variable = document.getElementById('varInput').value.trim() || 'x';

  if(!expr){
    alert("Vui l√≤ng nh·∫≠p bi·ªÉu th·ª©c c·∫ßn ƒë·∫°o h√†m!");
    return;
  }

  const steps = generateSteps(expr, variable);
  showStepsOnUI(steps);
}

// Khi DOM s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', function(){
  const solveBtn = document.getElementById('solveBtn');
  if(solveBtn) solveBtn.addEventListener('click', solveDerivative);
});
