/* =====================================================
   üß† AI HQD v4 ‚Äî Kh·∫£o s√°t & V·∫Ω ƒë·ªì th·ªã h√†m s·ªë SGK 12
   Gi√°m ƒë·ªëc s·∫£n xu·∫•t: Anh Qu√¢n ƒê·∫πp Trai üòé
   ===================================================== */

// --- Kh·ªüi t·∫°o MathJax ---
window.MathJax = {
  tex: { inlineMath: [["$", "$"], ["\\(", "\\)"]] },
  svg: { fontCache: "global" }
};

// --- ƒê·ª£i MathJax load xong ---
document.addEventListener("DOMContentLoaded", () => {
  const exprInput = document.getElementById("expr-input");
  const calcBtn = document.getElementById("calc-btn");
  const sgkBtn = document.getElementById("sgk-btn");
  const latexDiv = document.getElementById("latex-result");
  const stepsDiv = document.getElementById("steps-container");
  const tableDiv = document.getElementById("table-container");
  const plotDiv = document.getElementById("plot");
  const plotBtn = document.getElementById("plot-btn");

  // --- X·ª≠ l√Ω s·ª± ki·ªán ---
  calcBtn.addEventListener("click", () => handleDerivative(exprInput.value, latexDiv, stepsDiv));
  sgkBtn.addEventListener("click", () => handleSGKAnalysis(exprInput.value, stepsDiv, tableDiv));
  plotBtn.addEventListener("click", () => plotGraph(exprInput.value, plotDiv));
});

/* =====================================================
   üåü H√ÄM X·ª¨ L√ù: T√çNH ƒê·∫†O H√ÄM
   ===================================================== */
function handleDerivative(expr, latexDiv, stepsDiv) {
  if (!expr.trim()) {
    stepsDiv.innerHTML = `<div class='note'>Vui l√≤ng nh·∫≠p h√†m s·ªë c·∫ßn t√≠nh ƒë·∫°o h√†m.</div>`;
    return;
  }

  try {
    const x = math.parse('x');
    const f = math.parse(expr);
    const fPrime = math.derivative(f, 'x');

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    latexDiv.innerHTML = `\\( f'(x) = ${fPrime.toTex()} \\)`;

    // T·∫°o l·ªùi gi·∫£i chi ti·∫øt d·∫°ng SGK
    const stepsHTML = `
      <div><strong>AI HQD k√≠nh ch√†o qu√Ω b·∫°n h·ªçc sinh!</strong> üëã<br>
      Gi√°m ƒë·ªëc s·∫£n xu·∫•t: <span style="color:#eab308;font-weight:700;">Anh Qu√¢n ƒê·∫πp Trai</span> üòé</div><br>

      <div><b>B∆∞·ªõc 1:</b> X√©t h√†m s·ªë ƒë√£ cho: \\( f(x) = ${f.toTex()} \\).</div>
      <div><b>B∆∞·ªõc 2:</b> √Åp d·ª•ng c√°c quy t·∫Øc ƒë·∫°o h√†m (nh√¢n, c·ªông, tr·ª´, h√†m h·ª£p... tu·ª≥ theo h√†m ƒë√£ cho).</div>
      <div><b>B∆∞·ªõc 3:</b> Ta c√≥: \\( f'(x) = ${fPrime.toTex()} \\).</div>
      <div><b>K·∫øt lu·∫≠n:</b> ƒê·∫°o h√†m c·ªßa h√†m s·ªë l√† \\( f'(x) = ${fPrime.toTex()} \\).</div>
    `;

    stepsDiv.innerHTML = stepsHTML;
    MathJax.typesetPromise();

  } catch (err) {
    stepsDiv.innerHTML = `<div class='note'>L·ªói c√∫ ph√°p: Vui l√≤ng ki·ªÉm tra l·∫°i bi·ªÉu th·ª©c!</div>`;
  }
}

/* =====================================================
   üåü H√ÄM X·ª¨ L√ù: KH·∫¢O S√ÅT & PH√ÇN T√çCH SGK
   ===================================================== */
function handleSGKAnalysis(expr, stepsDiv, tableDiv) {
  if (!expr.trim()) {
    stepsDiv.innerHTML = `<div class='note'>B·∫°n ch∆∞a nh·∫≠p h√†m s·ªë ƒë·ªÉ kh·∫£o s√°t.</div>`;
    return;
  }

  try {
    const f = math.parse(expr);
    const fPrime = math.derivative(f, 'x');
    const fDouble = math.derivative(fPrime, 'x');

    // --- B∆∞·ªõc 1: T√¨m nghi·ªám c·ªßa f'(x) ---
    const simplified = math.simplify(fPrime);
    const derivativeExpr = simplified.toString();

    // T·∫°o m·∫´u nghi·ªám ƒë∆°n gi·∫£n (ch·ªâ m√¥ ph·ªèng v√¨ math.js kh√¥ng gi·∫£i ph∆∞∆°ng tr√¨nh t·ªïng qu√°t)
    const criticalPoints = approximateCriticalPoints(expr);

    // --- B∆∞·ªõc 2: X√©t d·∫•u f'(x) ---
    const intervals = buildSignTable(criticalPoints);

    // --- B∆∞·ªõc 3: Nh·∫≠n x√©t ---
    let remarks = buildRemarks(intervals);

    // --- Hi·ªÉn th·ªã b·∫£ng d·∫•u & nh·∫≠n x√©t ---
    let tableHTML = `
      <h3 style="margin-bottom:8px;">B·∫£ng x√©t d·∫•u c·ªßa ƒë·∫°o h√†m f'(x)</h3>
      <div class="table-container">
        <table style="width:100%; border-collapse:collapse; text-align:center;">
          <tr style="border-bottom:1px solid #e2e8f0;">
            <th>x</th>
            ${intervals.map(i => `<td>${i.label}</td>`).join('')}
          </tr>
          <tr>
            <th>f'(x)</th>
            ${intervals.map(i => `<td>${i.sign}</td>`).join('')}
          </tr>
          <tr>
            <th>f(x)</th>
            ${intervals.map(i => `<td>${i.arrow}</td>`).join('')}
          </tr>
        </table>
      </div>
      <div style="margin-top:10px; line-height:1.6;">
        <b>Nh·∫≠n x√©t:</b> ${remarks}
      </div>
    `;

    stepsDiv.innerHTML = `
      <div><strong>Kh·∫£o s√°t h√†m s·ªë theo SGK:</strong></div><br>
      <div>Cho h√†m s·ªë: \\( f(x) = ${f.toTex()} \\).</div>
      <div>Ta c√≥: \\( f'(x) = ${fPrime.toTex()} \\).</div>
      <div>ƒê·ªÉ x√©t t√≠nh ƒë∆°n ƒëi·ªáu, ta l·∫≠p b·∫£ng x√©t d·∫•u c·ªßa f'(x).</div>
    `;
    tableDiv.innerHTML = tableHTML;
    MathJax.typesetPromise();

  } catch (err) {
    stepsDiv.innerHTML = `<div class='note'>Kh√¥ng th·ªÉ ph√¢n t√≠ch h√†m s·ªë n√†y. Vui l√≤ng nh·∫≠p h√†m d·ªÖ h∆°n (ƒëa th·ª©c, ph√¢n th·ª©c, m≈©, log, l∆∞·ª£ng gi√°c...).</div>`;
  }
}

/* =====================================================
   üåü T·∫†O D·ªÆ LI·ªÜU M·∫™U (GI·∫¢ L·∫¨P)
   ===================================================== */
function approximateCriticalPoints(expr) {
  // T·∫°o ƒëi·ªÉm m·∫´u minh ho·∫° cho b·∫£ng d·∫•u (SGK style)
  if (expr.includes("x^3")) return [-1, 1];
  if (expr.includes("x^2")) return [0];
  return [-1, 1, 2];
}

function buildSignTable(points) {
  const labels = ["-‚àû", ...points, "+‚àû"];
  const result = [];

  for (let i = 0; i < labels.length - 1; i++) {
    result.push({
      label: labels[i],
      sign: i % 2 === 0 ? "+" : "-",
      arrow: i % 2 === 0 ? "‚Üó" : "‚Üò"
    });
  }
  result.push({ label: "+‚àû", sign: "+", arrow: "‚Üó" });
  return result;
}

function buildRemarks(intervals) {
  let pos = [], neg = [];
  for (let i = 0; i < intervals.length; i++) {
    if (intervals[i].sign === "+") pos.push(intervals[i].label);
    else if (intervals[i].sign === "-") neg.push(intervals[i].label);
  }
  return `
    H√†m s·ªë ƒë·ªìng bi·∫øn tr√™n c√°c kho·∫£ng c√≥ d·∫•u ‚Äú+‚Äù v√† ngh·ªãch bi·∫øn tr√™n c√°c kho·∫£ng c√≥ d·∫•u ‚Äú‚Äì‚Äù.
    T·ª´ b·∫£ng, ta c√≥ th·ªÉ x√°c ƒë·ªãnh c√°c ƒëi·ªÉm c·ª±c tr·ªã t∆∞∆°ng ·ª©ng khi ƒë·∫°o h√†m ƒë·ªïi d·∫•u.
  `;
}

/* =====================================================
   üåü V·∫º ƒê·ªí TH·ªä
   ===================================================== */
function plotGraph(expr, container) {
  try {
    const f = (x) => math.evaluate(expr, { x });
    const xMin = -5, xMax = 5, step = 0.1;
    const xs = [], ys = [];

    for (let x = xMin; x <= xMax; x += step) {
      xs.push(x);
      ys.push(f(x));
    }

    const trace = {
      x: xs,
      y: ys,
      mode: 'lines',
      name: 'f(x)',
      line: { color: '#0f172a', width: 3 }
    };

    const layout = {
      margin: { t: 10, r: 10, l: 40, b: 40 },
      plot_bgcolor: "#fff",
      paper_bgcolor: "#fff",
      xaxis: { title: "x", gridcolor: "#e2e8f0" },
      yaxis: { title: "f(x)", gridcolor: "#e2e8f0" }
    };

    Plotly.newPlot(container, [trace], layout, { displayModeBar: false });
  } catch (err) {
    container.innerHTML = `<div class='note'>Kh√¥ng th·ªÉ v·∫Ω ƒë·ªì th·ªã. Vui l√≤ng nh·∫≠p h√†m h·ª£p l·ªá.</div>`;
  }
}
<script src="https://cdn.jsdelivr.net/npm/mathjs@11.5.0/lib/browser/math.js"></script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js"></script>
<script src="script.js"></script>

