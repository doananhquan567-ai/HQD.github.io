/* ============================================================
   AI HQD ‚Äî ƒê·∫†O H√ÄM TR·ª¢ L√ù TH√îNG MINH
   T√°c gi·∫£: B·∫°n v√† ChatGPT (Phi√™n b·∫£n AI HQD)
   Phi√™n b·∫£n: 1.0.0
   M·ª•c ti√™u: Gi·∫£i ƒë·∫°o h√†m t·ª´ng b∆∞·ªõc, gi·∫£i th√≠ch chu·∫©n SGK,
             hi·ªÉn th·ªã LaTeX ƒë·∫πp v√† v·∫Ω ƒë·ªì th·ªã h√†m s·ªë.
   ============================================================ */

// ==================== C√ÅC TH∆Ø VI·ªÜN ====================
/* 
  - Math.js: h·ªó tr·ª£ t√≠nh ƒë·∫°o h√†m, r√∫t g·ªçn bi·ªÉu th·ª©c, v·∫Ω ƒë·ªì th·ªã.
  - MathJax: hi·ªÉn th·ªã c√¥ng th·ª©c LaTeX.
  - Plotly.js: v·∫Ω bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c f(x) v√† f'(x).
*/

// ==================== H√ÄM KH·ªûI T·∫†O ====================

document.addEventListener("DOMContentLoaded", function () {
  const exprInput = document.getElementById("expr-input");
  const calcBtn = document.getElementById("calc-btn");
  const clearBtn = document.getElementById("clear-btn");
  const resultLatex = document.getElementById("result-latex");
  const resultText = document.getElementById("result-text");
  const stepsContainer = document.getElementById("steps-container");
  const plotRoot = document.getElementById("plot-root");
  const plotBtn = document.getElementById("plot-btn");
  const aiInput = document.getElementById("ai-input");
  const aiSend = document.getElementById("ai-send");
  const chatResponse = document.getElementById("chat-response");
  const helpBtn = document.getElementById("help-btn");
  const helpModal = document.getElementById("help-modal");
  const modalClose = document.getElementById("modal-close");

  // ·∫®n/hi·ªán h∆∞·ªõng d·∫´n
  helpBtn.addEventListener("click", () => helpModal.style.display = "flex");
  modalClose.addEventListener("click", () => helpModal.style.display = "none");

  // X·ª≠ l√Ω n√∫t t√≠nh ƒë·∫°o h√†m
  calcBtn.addEventListener("click", function () {
    const expr = exprInput.value.trim();
    if (expr === "") {
      showResult("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·ªôt h√†m s·ªë tr∆∞·ªõc.", "", []);
      return;
    }

    try {
      const steps = explainDerivative(expr);
      const derivative = math.derivative(expr, "x").toString();
      const simplified = math.simplify(derivative).toString();

      showResult(
        `K·∫øt qu·∫£: ${simplified}`,
        simplified,
        steps
      );

      renderLatex(resultLatex, simplified);
      drawPlot(expr, simplified);
    } catch (err) {
      showResult("‚ùå Bi·ªÉu th·ª©c kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a h·ªó tr·ª£.", "", []);
    }
  });

  // N√∫t x√≥a
  clearBtn.addEventListener("click", function () {
    exprInput.value = "";
    showResult("", "", []);
    Plotly.purge(plotRoot);
  });

  // G·ª≠i c√¢u h·ªèi t·ªõi AI Chat
  aiSend.addEventListener("click", function () {
    const question = aiInput.value.trim();
    if (!question) return;
    aiResponse(question);
  });

  // G·∫Øn v√≠ d·ª• nhanh
  document.querySelectorAll(".example-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      exprInput.value = btn.dataset.expr;
    });
  });
});

// ==================== HI·ªÇN TH·ªä K·∫æT QU·∫¢ ====================

function showResult(text, latexExpr, steps) {
  document.getElementById("result-text").textContent = text;
  renderLatex(document.getElementById("result-latex"), latexExpr);

  const stepsContainer = document.getElementById("steps-container");
  stepsContainer.innerHTML = steps.length
    ? steps.map((s, i) => `<p><b>B∆∞·ªõc ${i + 1}:</b> ${s}</p>`).join("")
    : "";
}

// ==================== GI·∫¢I TH√çCH ƒê·∫†O H√ÄM ====================

function explainDerivative(expr) {
  const steps = [];

  // Chu·∫©n h√≥a
  const normalized = expr.replace(/\s+/g, "");

  // Nh·∫≠n d·∫°ng lo·∫°i h√†m c∆° b·∫£n
  if (/sin|cos|tan/.test(normalized)) {
    steps.push("Nh·∫≠n d·∫°ng: H√†m l∆∞·ª£ng gi√°c.");
    if (normalized.includes("sin")) steps.push("√Åp d·ª•ng c√¥ng th·ª©c (sin x)' = cos x.");
    if (normalized.includes("cos")) steps.push("√Åp d·ª•ng c√¥ng th·ª©c (cos x)' = -sin x.");
    if (normalized.includes("tan")) steps.push("√Åp d·ª•ng c√¥ng th·ª©c (tan x)' = 1 / cos¬≤x.");
  }

  if (/exp|e\^/.test(normalized)) {
    steps.push("Nh·∫≠n d·∫°ng: H√†m m≈© c∆° b·∫£n e^x.");
    steps.push("√Åp d·ª•ng c√¥ng th·ª©c (e^u)' = u'¬∑e^u.");
  }

  if (/log/.test(normalized)) {
    steps.push("Nh·∫≠n d·∫°ng: H√†m logarit.");
    steps.push("√Åp d·ª•ng c√¥ng th·ª©c (ln u)' = u'/u.");
  }

  if (/\+|-/.test(normalized)) {
    steps.push("√Åp d·ª•ng quy t·∫Øc t·ªïng/hi·ªáu: (u ¬± v)' = u' ¬± v'.");
  }

  if (/\*/.test(normalized)) {
    steps.push("√Åp d·ª•ng quy t·∫Øc nh√¢n: (u¬∑v)' = u'¬∑v + u¬∑v'.");
  }

  if (/\//.test(normalized)) {
    steps.push("√Åp d·ª•ng quy t·∫Øc th∆∞∆°ng: (u/v)' = (u'v - uv') / v¬≤.");
  }

  // Lu√¥n c√≥ b∆∞·ªõc cu·ªëi: R√∫t g·ªçn k·∫øt qu·∫£
  steps.push("R√∫t g·ªçn bi·ªÉu th·ª©c thu ƒë∆∞·ª£c ƒë·ªÉ c√≥ ƒë·∫°o h√†m cu·ªëi c√πng.");

  return steps;
}

// ==================== HI·ªÇN TH·ªä C√îNG TH·ª®C LaTeX ====================

function renderLatex(target, expr) {
  if (!window.MathJax) return;
  target.innerHTML = `$$${math.parse(expr).toTex()}$$`;
  MathJax.typesetPromise();
}

// ==================== V·∫º ƒê·ªí TH·ªä ====================

function drawPlot(originalExpr, derivativeExpr) {
  const xValues = math.range(-10, 10, 0.1).toArray();
  const yOriginal = xValues.map(x => math.evaluate(originalExpr, { x }));
  const yDeriv = xValues.map(x => math.evaluate(derivativeExpr, { x }));

  const trace1 = {
    x: xValues,
    y: yOriginal,
    mode: "lines",
    name: "f(x)",
    line: { color: "#3b82f6", width: 3 }
  };

  const trace2 = {
    x: xValues,
    y: yDeriv,
    mode: "lines",
    name: "f'(x)",
    line: { color: "#f59e0b", width: 3, dash: "dot" }
  };

  const layout = {
    margin: { t: 20 },
    plot_bgcolor: "#ffffff",
    paper_bgcolor: "#ffffff",
    xaxis: { title: "x", gridcolor: "#e2e8f0" },
    yaxis: { title: "y", gridcolor: "#e2e8f0" },
    legend: { x: 0.8, y: 1 }
  };

  Plotly.newPlot("plot-root", [trace1, trace2], layout, { responsive: true });
}

// ==================== TR√í CHUY·ªÜN AI HQD ====================

function aiResponse(question) {
  const responseBox = document.getElementById("chat-response");
  const aiName = "AI HQD";

  let answer = "";

  // C√°c c√¢u h·ªèi ph·ªï bi·∫øn
  const lower = question.toLowerCase();

  if (lower.includes("t·∫°o") && lower.includes("b·∫°n")) {
    answer = "T√¥i ƒë∆∞·ª£c t·∫°o ra b·ªüi b·∫°n c√πng s·ª± h·ªó tr·ª£ c·ªßa ChatGPT ‚Äî m√¥ h√¨nh GPT-5 üí°.";
  } else if (lower.includes("ƒë·∫°o h√†m")) {
    answer = "ƒê·∫°o h√†m l√† c√¥ng c·ª• ƒë·ªÉ x√°c ƒë·ªãnh t·ªëc ƒë·ªô bi·∫øn thi√™n c·ªßa h√†m s·ªë. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√≠nh v√† gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc chi ti·∫øt.";
  } else if (lower.includes("quy t·∫Øc") && lower.includes("nh√¢n")) {
    answer = "Quy t·∫Øc nh√¢n: (u¬∑v)' = u'¬∑v + u¬∑v'. B·∫°n h√£y x√°c ƒë·ªãnh u v√† v tr∆∞·ªõc khi √°p d·ª•ng nh√©.";
  } else if (lower.includes("quy t·∫Øc") && lower.includes("th∆∞∆°ng")) {
    answer = "Quy t·∫Øc th∆∞∆°ng: (u/v)' = (u'v - uv') / v¬≤. ƒê·ª´ng qu√™n b√¨nh ph∆∞∆°ng m·∫´u s·ªë.";
  } else if (lower.includes("ch√†o")) {
    answer = "Xin ch√†o! T√¥i l√† AI HQD ü§ñ ‚Äì Tr·ª£ l√Ω To√°n h·ªçc th√¥ng minh, r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n!";
  } else {
    answer = "T√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi, nh∆∞ng b·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ ƒë·∫°o h√†m, quy t·∫Øc to√°n, hay c√¥ng th·ª©c c·ª• th·ªÉ nh√©.";
  }

  responseBox.textContent = `${aiName}: ${answer}`;
}
