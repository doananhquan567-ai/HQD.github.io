function explainDerivativeSGK(expr, variable) {
  const steps = [];
  steps.push({
    title: "B∆∞·ªõc 1",
    content: `X√©t h√†m s·ªë \\( y = ${expr} \\). Ta c·∫ßn t√¨m ƒë·∫°o h√†m c·ªßa \\( y \\) theo \\( ${variable} \\).`
  });

  const derivative = math.derivative(expr, variable).toString();
  const simplified = math.simplify(derivative).toString();

  steps.push({
    title: "B∆∞·ªõc 2",
    content: "√Åp d·ª•ng c√°c quy t·∫Øc ƒë·∫°o h√†m c∆° b·∫£n v√† t√≠nh t·ª´ng ph·∫ßn theo th·ª© t·ª±."
  });

  steps.push({
    title: "B∆∞·ªõc 3",
    content: `Th·ª±c hi·ªán ph√©p ƒë·∫°o h√†m: \\( y' = ${toTexFromString(derivative)} \\)`
  });

  steps.push({
    title: "B∆∞·ªõc 4",
    content: `R√∫t g·ªçn bi·ªÉu th·ª©c: \\( y' = ${toTexFromString(simplified)} \\)`
  });

  steps.push({
    title: "K·∫øt lu·∫≠n",
    content: `V·∫≠y ƒë·∫°o h√†m c·ªßa \\( y = ${expr} \\) l√†: \\( y' = ${toTexFromString(simplified)} \\).`
  });

  return steps;
}
function generateSteps(expr, variable){
  try {
    return explainDerivativeSGK(expr, variable);
  } catch(e) {
    console.error("Error generating SGK steps:", e);
    return [{title: "L·ªói", content: "Kh√¥ng th·ªÉ sinh l·ªùi gi·∫£i chi ti·∫øt cho bi·ªÉu th·ª©c n√†y."}];
  }
}
function showStepsOnUI(steps){
  const container = document.getElementById('stepsContainer');
  container.innerHTML = '<h3>üìò L·ªùi gi·∫£i chi ti·∫øt (Chu·∫©n SGK)</h3>';
  steps.forEach((s, i) => {
    const div = document.createElement('div');
    div.className = 'step';
    div.innerHTML = `<b>${s.title}.</b> ${s.content}`;
    container.appendChild(div);
  });
  if(window.MathJax) MathJax.typeset(); // l√†m c√¥ng th·ª©c hi·ªÉn th·ªã ƒë·∫πp
}
